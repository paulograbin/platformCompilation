<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
-->
<project name="cleanupEclipseWarnings">
  
 <!-- Contains Macro to clean up eclipse errors and warnings for Binary Dist and Source Dist--> 
 
 <!-- Macro for Binary Dist --> 
 <macrodef name="modify_eclipse_settings_binary">
   <attribute name="destdir" />
   <attribute name="extname" />
   
   <sequential>
    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="${platformhome}/resources/ant/lib/xmltask-1.16.jar" />
      <echo level="info" message="Cleaning up errors and warnings for @{extname}" />

      <if>
        <available file="@{destdir}/.project"/>
        <then>
          <private_manipulate_project_file destdir="@{destdir}" />
        </then>
      </if>

      <if>
        <available file="@{destdir}/.pmd" />
        <then>
          <private_manipulate_pmd_file destdir="@{destdir}" />
        </then>
      </if>

      <if>
        <available file="@{destdir}/.settings/org.eclipse.jdt.core.prefs" type="file" />
        <then>
          <replaceregexp file="@{destdir}/.settings/org.eclipse.jdt.core.prefs"
            match = "(=warning|=error)"
            replace = "=ignore"
            byline="true"
          />
          <echo level="info" message="Setting compiler compliance level to ${build.target}"/>
          <replaceregexp file="@{destdir}/.settings/org.eclipse.jdt.core.prefs"
            match = "org.eclipse.jdt.core.compiler.compliance=.*"
            replace = "org.eclipse.jdt.core.compiler.compliance=${build.target}"
            byline="true"
          />
          <replaceregexp file="@{destdir}/.settings/org.eclipse.jdt.core.prefs"
            match = "org.eclipse.jdt.core.compiler.source=.*"
            replace = "org.eclipse.jdt.core.compiler.source=${build.target}"
            byline="true"
          />
          <replaceregexp file="@{destdir}/.settings/org.eclipse.jdt.core.prefs"
            match = "org.eclipse.jdt.core.compiler.codegen.targetPlatform=.*"
            replace = "org.eclipse.jdt.core.compiler.codegen.targetPlatform=${build.target}"
            byline="true"
          />

          <verify_and_fix_eof prefsfile="@{destdir}/.settings/org.eclipse.jdt.core.prefs" />
          
          <add_eclipse_prefs_property
            prefsfile="@{destdir}/.settings/org.eclipse.jdt.core.prefs"
            propertykey="org.eclipse.jdt.core.compiler.problem.terminalDeprecation"
          />
        </then>
      </if>
    </sequential>
 </macrodef>

 
 <macrodef name="private_manipulate_project_file">
   <attribute name="destdir" />
   <sequential>
     <xmltask source="@{destdir}/.project" dest="@{destdir}/.project">
        <replace path="projectDescription/buildSpec/buildCommand[name/text()='net.sourceforge.pmd.eclipse.plugin.pmdBuilder']" WithText=""/>
        <replace path="projectDescription/natures/nature[text()='net.sourceforge.pmd.eclipse.plugin.pmdNature']" WithText=""/>
      </xmltask>
   </sequential>
 </macrodef>
 
 
  <macrodef name="private_manipulate_pmd_file">
   <attribute name="destdir" />
   <sequential>
    <xmltask source="@{destdir}/.pmd" dest="@{destdir}/.pmd">
      <replace path="pmd/violationsAsErrors/text()" WithText="false"/>
    </xmltask>
   </sequential>
 </macrodef>
 

 
 <!-- Macro for Source Dist --> 
 <macrodef name="modify_eclipse_settings_source">
   <attribute name="destdir" />
   <attribute name="extname" />
   
   <sequential>  
    <echo level="info" message="Deleting .settings from @{extname}" />
    <if>
      <available file="@{destdir}/.settings" type="dir" />
      <then>
        <delete dir="${path}/.settings" />
      </then>
    </if>
    </sequential>
 </macrodef>
  
 <macrodef name="add_eclipse_prefs_property">
   <attribute name="prefsfile" />
   <attribute name="propertykey" />

   <sequential>
    <local name="propertykeyfound" />

    <condition property="propertykeyfound">
     <resourcecontains resource="@{prefsfile}" substring="@{propertykey}" />
    </condition>

    <if>
      <not>
        <equals arg1="${propertykeyfound}" arg2="true" />
      </not>
      <then>
        <echo level="info" message="Adding @{propertykey}=ignore into @{prefsfile}" />
        <echo file="@{prefsfile}" append="true" message="@{propertykey}=ignore${line.separator}" />
      </then>
    </if>
   </sequential>
 </macrodef>

 <macrodef name="verify_and_fix_eof">
   <attribute name="prefsfile" />

   <sequential>
    <local name="prefsfiletext" />
    <local name="endWithEol" />

    <loadfile property="prefsfiletext" srcFile="@{prefsfile}" />

    <condition property="endWithEol">
      <matches pattern="^.+(\r\n|\r|\n)$" string="${prefsfiletext}" singleline="true" />
    </condition>

    <if>
      <not>
        <equals arg1="${endWithEol}" arg2="true" />
      </not>
      <then>
        <echo level="info" message="Fixing end of the file: @{prefsfile} and adding line break" />
        <echo file="@{prefsfile}" append="true" message="${line.separator}" />
      </then>
    </if>
   </sequential>
 </macrodef>

</project>  
