# -----------------------------------------------------------------------
# Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
# -----------------------------------------------------------------------

core.global-context=global-core-spring.xml,core-cache.xml,global-servicelayer-spring.xml,global-core-jmx-spring.xml,global-statistics-spring.xml

core.application-context=core-spring.xml,persistence-spring.xml,core-media-spring.xml,core-profiling-spring.xml,core-jmx-spring.xml,core-filter-spring.xml,servicelayer-spring.xml,user-spring.xml,security-spring.xml,media-spring.xml,i18n-spring.xml,interceptor-spring.xml,event-spring.xml

#-----------------------------------------------------------------------------------#
# This property stores the information about core types and attributes					#
# that need custom generated signature of the method.											#
#
# Important information!! : please update the content of the 								#
# de.hybris.bootstrap.typesystem.YNamespace#MIGRATED_CORE_DEPLOYMENTS_INFO map.		#
#-----------------------------------------------------------------------------------#
# required pattern of the value: type,attr,attr...;type,attr,...;							#
# 'type' value is required. Last ';' is required												#
#-----------------------------------------------------------------------------------#
migrated_core_type.info=Title,code;Media,URL;AbstractMedia,mime;Product;Unit;C2LItem,active,isocode;Country;Language;Region;Currency;AbstractOrder;Cart;Order;AbstractOrderEntry;CartEntry;OrderEntry;Tax,code;Discount,code;DeliveryMode,code;PaymentMode,code;PaymentInfo;Principal,uid;PrincipalGroup;User;UserGroup;Address;UserRight,code;SavedValues;SavedValueEntry;HMCHistoryEntry;UserProfile;

##################
##  !!!! temporary switch to legacy mode for persistence !!!!
persistence.legacy.mode=true
##################

## Enable audit tables creation
auditing.enabled=true

## Enable audit report production mode. All configuration warnings will be reported as errors
audit.report.production.mode=false

## Audit SQL select statement size limit for given DB
audit.query.limit.sap=100000

#Override for ProjectStructureTest test which checks for redundant libraries in the commerce suite
#Syntax: duplicatejarchecker.ignore.partialPathToFirstLib_____partialPathToSecondLib=comment
duplicatejarchecker.ignore.platformwebservices/web/webroot/WEB-INF/lib/jersey-server_____platform/ext/core/lib/jersey-server=all_platformwebservices_duplicates_are_ignored
duplicatejarchecker.ignore.platformwebservices/web/webroot/WEB-INF/lib/jersey-client_____platform/ext/core/lib/jersey-client=all_platformwebservices_duplicates_are_ignored
duplicatejarchecker.ignore.platformwebservices/web/webroot/WEB-INF/lib/jersey-test-framework-core_____platform/ext/core/lib/jersey-test-framework-core=all_platformwebservices_duplicates_are_ignored

# Enable to migrate core types during system start up
should.migrate.core.types=false

# JDBC interceptor settings
#jdbc.interceptor.enabled=true
#jdbc.interceptor.factory.class=de.hybris.platform.jdbcwrapper.interceptor.factory.DefaultJDBCInterceptorFactory

#JDBC recovery settings
#jdbc.recovery.backoff.initial.seconds=10
#jdbc.recovery.backoff.increase.factor=1.3333333334
#jdbc.recovery.backoff.max.seconds=60
#jdbc.recovery.common.recoverable.error.codes=
jdbc.recovery.sqlserver.recoverable.error.codes=4060, 40197, 40501, 40613, 49918, 49919, 49920, 4221
#jdbc.recovery.postgresql.recoverable.error.codes=
#jdbc.recovery.mysql.recoverable.error.codes=
#jdbc.recovery.hsqldb.recoverable.error.codes=
#jdbc.recovery.oracle.recoverable.error.codes=
#jdbc.recovery.sap.recoverable.error.codes=
#SQLRecoverableException that should be treated as non recoverable
#jdbc.recovery.common.nonrecoverable.error.codes=
#jdbc.recovery.sqlserver.nonrecoverable.error.codes=
#jdbc.recovery.postgresql.nonrecoverable.error.codes=
#jdbc.recovery.mysql.nonrecoverable.error.codes=
#jdbc.recovery.hsqldb.nonrecoverable.error.codes=
jdbc.recovery.oracle.nonrecoverable.error.codes=17002, 17008
#jdbc.recovery.sap.nonrecoverable.error.codes=

user.deactivation.blockForAllAdmins=false

# If you are going to implement the Polyglot Persistence you can turn this flag to true to see all flexible search
# queries which must be translated from the SQL to the Polyglot  dialect. false by default.
#polyglot.validation.enabled=false;

# should throw FlexibleSearchException when validation fail for query with using polyglot
# e.g. using polyglot types in sql dialect
polyglot.validation.should.throw.exception=false

#pause in miliseconds for "thread registry logger thread".
#it means that after each x (e.g. 1 for registered threads) minute(s) it will log registered threads or thread dump respectively
threadregistry.pause.registeredthreads = 60000
threadregistry.pause.threadsdump = 600000

# determines whether config-based handler should be installed. If true, the sameSite values will be based on
# cookies.*.SameSite properties. If false, sameSiteSettings.properties in tomcat/bin/sameSiteCookies.properties file
# will be used (if provided)
cookies.SameSite.install.application.handler=true

# if config-based handler is installed and true, the sameSite value will be set based on configuration. If false,
# the sameSite won't be set
cookies.SameSite.enabled=false

# default sameSite value
cookies.SameSite=None

# example for domain 'null', path '/' and name 'JSESSIONID'
# cookies.null./.JSESSIONID.SameSite=None


# allows to store files with long names in local cache
# prevent.longfilenames.localcache=true

# All HTTP sessions established before User password change are treated as stale. By default, all stale sessions are
# invalidated except HTTP session which is used to change the password.
# This session is invalidated only if property invalidate.current.authentication.on.password.change=true
# Following property allows you to disable this behaviour globally.
session.staleness.detection.enabled=true

# If you want to override the global configuration for any extension you can use following property format to do so.
#session.staleness.detection.{extension_name}.enabled=true

# Determines if HTTP session or token used during password changing should also be invalidated.
# Invalidation will take place only when stale session mechanism (session.staleness.detection.enabled)
# or revoke token mechanism (oauth2.revoke.tokens.on.user.password.change) are enabled
invalidate.current.authentication.on.password.change=false

# Allows you to control if the spring related data are reported as part of the Commerce Statistics. Disabled by default.
#statistics.collector.spring-overview.enabled=false


log4j2.appender.jsonMetricsAppender.type=Console
log4j2.appender.jsonMetricsAppender.name=JSONMetricsAppender
log4j2.appender.jsonMetricsAppender.layout.type=PatternLayout
log4j2.appender.jsonMetricsAppender.layout.pattern={"timeMillis":"%d{UNIX_MILLIS}", "thread":"%t","level":"%p","loggerName":"%c","message":"%m", "metrics":%X{metrics}}%n

log4j2.logger.logsMetricsReporter.name=de.hybris.platform.metrics.dropwizard.Slf4jMdcMetricsReporter
log4j2.logger.logsMetricsReporter.level=DEBUG
log4j2.logger.logsMetricsReporter.additivity=false
log4j2.logger.logsMetricsReporter.appenderRef.jsonMetricsAppender.ref=JSONMetricsAppender


metrics.reporter.logsMetricsReporter.enabled=false

# defines the SpEL expressions used to filter the names of metrics reported periodically where #metric is placeholder for metric name
# if many filters are defined, the metric will be logged when at least one filter is matching
# reports all metrics when no filters is set
metrics.reporter.logsMetricsReporter.filters.cache=(\\#metric.contains(',module=cache,'))
metrics.reporter.logsMetricsReporter.filters.links.pgrel=(\\#metric.contains(',module=jalo,') && \\#metric.contains(',relation=PrincipalGroupRelation,'))

# defines the period (in seconds) how often metrics should be reported
metrics.reporter.logsMetricsReporter.period.seconds=900

###################################
# Relations caching configuration #
###################################

# If enabled (set to true) then relation level properties are taken into account. If disabled (set to false) the
# relation caching is disabled. This property is here to provide a one kill switch to turn off relation caching.
relation.cache.enabled=true

# Relation level configuration allows you to turn on/off caching for a particular relation. If enabled additional data
# will be included in the invalidation key relation invalidation will be propagated. Relation level configuration is
# ignored if relation caching is disabled. By default cache for all relations is turned off.

#relation.cache.RelationTypeCode.enabled=true

relation.cache.PrincipalGroupRelation.enabled=true

# The default cache capacity that is used by any relation side that does not explicitly define its custom capacity per relation.
# The data is evicted using LRU when this capacity is reached for the given relation side and another entry is cached.
relation.cache.default.capacity=10000

# Explicit custom cache capacity configuration for the given relation.
relation.cache.PrincipalGroupRelation.capacity=50000

# defines the value of MAXDOP added as a hint in flexiblesearch queries - it must be a positive value
# default value -1 means, that no MAXDOP hint from global config will be added to FlexibleSearch query
flexiblesearch.hints.sqlserver.maxdop=-1

# When activating the tenant, check its connection pool for connectivity.
tenant.connection.check.enabled=false

#enables using DB unique indexes instead of queries that checks uniqueness before insert
unique.attribute.interceptor.db.index.enabled=false

# Enables lazy mode for loading models in LazyLoadModelList and LazyLoadItemSet for model getters
# Can be overwritten for a particular attribute, for example servicelayer.lazy.collections.Company.addresses.enabled=true/false
servicelayer.lazy.collections=false



# Specifies if the one time password (OTP) functionality is enabled for customer login
otp.customer.login.enabled = false
# Specifies the token encoder to be used for one time password code encoding functionality, see the available options in passwordEncoders of de.hybris.platform.persistence.security.PasswordEncoderFactoryImpl
otp.customer.login.token.code.encoder = ${default.password.encoding}
# When OTP is enabled allows to specify the length of verification tokens for OTP login functionality
# the minimum allowed value is 6 characters, maximum allowed value is 34 characters. If out of range value is provided, the value is rounded to the nearest allowed value. Additionally, a warning message is logged.
otp.customer.login.token.code.length = 8
# When OTP is enabled allows to set a specific character set with which the code for the OTP login functionality will be generated
# The minimal charset length should be 10 characters. If the provided charset is shorter, the default charset value 1234567890ABCDEFGHKLMNPRSTUWXYZabcdefghijklmnoprstuwxyz is used.
otp.customer.login.token.code.alphabet = 1234567890ABCDEFGHKLMNPRSTUWXYZabcdefghijklmnoprstuwxyz
# When OTP is enabled allows to specify time to live in seconds for the OTP login functionality
# the maximum allowed value is 900 seconds (15 minutes), minimum allowed value is 60 seconds. If out of range value is provided, the value is rounded to the nearest allowed value. Additionally, a warning message is logged.
otp.customer.login.token.ttlseconds = 300
# Specifies the maximum number of failed verification attempts for a single token, after which the token is removed from the system. Valid range is 1-10. If out of range value is provided, the value is rounded to the nearest allowed value. Additionally, a warning message is logged.
# 1 means that the token is removed after the first failed verification attempt ( no retries allowed )
otp.customer.login.token.max.verification.attempts = 3
# Number of bits used to generate the random part of the token id for the one time password (OTP) login functionality
# The minimum allowed value is 128 bits. Its recommended to use at least 256 bits. Max value is 1024 bits. If out of range value is provided, the value is rounded to the nearest allowed value. Additionally, a warning message is logged.
otp.customer.login.token.id.generator.bits = 256
# This short name is used to quickly identify the tokens generated for the OTP login functionality.
# The token id format is <{shortName}[{randomPart}]>
# The short name should be unique for initial verification purpose and kept short (max 10 characters) as it does not add any security value.
# If the short name exceeds 10 characters, it will be fallback to default 'OTH' (other) short name.
otp.customer.login.token.purpose.short.name = LGN
# Specifies if there should be maximum number of active tokens which can be created.
otp.customer.login.token.maxcount.enabled=true
# Maximum number of active tokens which can exist at the moment. If this number is reached then the attempts to create the token will fail.
# The minimum allowed value is 1, max value is 20. If out of range value is provided, the value is rounded to the nearest allowed value. Additionally, a warning message is logged.
otp.customer.login.token.maxcount=5


## Sample configuration that could be used for other (future) types of OTP functionality. The same properties as for customer login OTP are available for other OTP functionalities.
## The recipe for configuring new OTP purpose functionality is to create a set of properties according to rule: otp.customer.{SAPUserVerificationPurpose.code.toLowerCase()}.{detailedPropertyName}
## The same safe defaults as for customer login OTP are used for other OTP functionalities.
## Lets see this on example set of properties for customer password change OTP after PASSWORDCHANGE code is added to SAPUserVerificationPurpose enum (and proper logic is implemented)
#otp.customer.passwordchange.enabled = false
#otp.customer.passwordchange.token.code.encoder = pbkdf2
#otp.customer.passwordchange.token.code.length = 8
#otp.customer.passwordchange.token.code.alphabet = 1234567890ABCDEFGHKLMNPRSTUWXYZabcdefghijklmnoprstuwxyz
#otp.customer.passwordchange.token.ttlseconds = 300
#otp.customer.passwordchange.token.max.verification.attempts = 3
#otp.customer.passwordchange.token.id.generator.bits = 256
#otp.customer.passwordchange.token.purpose.short.name = PWC
#otp.customer.passwordchange.token.maxcount.enabled=true
#otp.customer.passwordchange.token.maxcount=5

# Specifies if one can be logged in to the system as an admin (user with admin UID)
# If set to false, the login as admin functionality is disabled
# If set to true, the login as admin functionality is enabled
# Note that this property controls login in all places, including backoffice, HAC, OAuth2 etc.
admin.login.enabled=true

# Password expiration fallback days as 99 years
platform.authentication.password.unchanged.expiry.fallback.days=36135
# Inactive password fallback expiration days as 99 years
platform.authentication.inactive.password.expiry.fallback.days=36135
# Initial password fallback expiration days as 99 years
platform.authentication.initialPassword.unchanged.expiry.fallback.days=36135
