# -----------------------------------------------------------------------
# Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
# -----------------------------------------------------------------------

oauth2.application-context=oauth2-spring.xml
#This property is used to set required channel in oauth2 and web services
webservicescommons.required.channel=https
# Specifies if new refresh token should be created during refreshing an Access Token
# reuseRefreshToken = true - old refresh token will be returned, refresh token can be used more than one time
# reuseRefreshToken = false - new refresh token will be created
oauthauthorizationserver.tokenServices.reuseRefreshToken=false
oauth2.supportRefreshToken=true
# 60*60*24*30 = 30d
oauth2.refreshTokenValiditySeconds=2592000
# Property for defining the time in minutes for cleaning up of oauth refresh tokens. 60*5
cleanup.cronjob.oauth.refresh.token.expiry.time.seconds=300
# 60*60*12 = 12h
oauth2.accessTokenValiditySeconds=43200
# Property for defining the time in seconds for cleaning up of oauth access tokens. 60*5
cleanup.cronjob.oauth.access.token.expiry.time.seconds=300
# 60*60*12 = 12h
oauth2.idTokenValiditySeconds=43200
# key id
#oauth2.kid=test1
# keystore location
#oauth2.keystore.location=/security/keystore.jks
# keystore password
#oauth2.keystore.password=nimda123

#algorithm default RS256 (shouldn't be changed without having an additional implementation of another algorithm)
#oauth2.algorithm=RS256
#oauth2.client-side.dummyemail=test@test.com

oauth2.tomcat.tld.scan=javax.servlet.jsp.jstl-*.jar
oauth2.tomcat.tld.default.scan.enabled=false
oauth2.tomcat.pluggability.scan=javax.servlet.jsp.jstl-*.jar
oauth2.tomcat.pluggability.default.scan.enabled=false

corsfilter.oauth2.allowedOrigins=*
corsfilter.oauth2.allowedHeaders=origin content-type accept authorization
corsfilter.oauth2.allowedMethods=GET POST HEAD PUT PATCH DELETE OPTIONS


#Example set of properties to integrate with kyma
#oauth2.kyma.algorithm=RS256
#oauth2.kyma.responseTypes=code,code id_token,id_token,token id_token
#oauth2.kyma.kid=kyma
#oauth2.kyma.keystore.location=/security/keystore.jks
#oauth2.kyma.keystore.password=nimda123
#oauth2.kyma.public.address=www.myshop.com

# When user password is changed all their tokens are revoked except the one used to change the password.
# This token is revoked only if property invalidate.current.authentication.on.password.change=true
# If password is changed without using OAuth (backoffice for instance) _all_ their tokens are revoked.
# This flag allows you to change this behavior.
oauth2.revoke.tokens.on.user.password.change=true

# Enables optimization which consists in not updating the OAuthAccessTokenModel object for method call
# DefaultOAuthTokenService::saveAccessToken when is no change to OAuth2Authentication
oauth2.optimize.accesstoken.save.enabled=true


# Enabled retry of saving access tokens in a situation when an attempt ends with ModelSavingException being thrown
# due to duplicate access token id caused by two or more threads trying to create the same access token
# in the HybrisOAuthTokenStore.
oauth2.accesstoken.save.retry=true

# Enables storing authorization code as SHA signature
oauth2.authorizationcode.stored.as.sha.signature=true

# Allows you to configure the length for generated authorization codes
oauth2.authorizationcode.length=30

# Property for defining the time in minutes for cleaning up of oauth codes.
cleanup.cronjob.oauth.code.expiry.time.minutes=5

# Enables refresh token processing by applying DB row locking (DB other than HSQLDB) / selective threads locking (for HSQLDB only)
# and also applies DB row locking for refresh token (DB other than HSQLDB) before refresh token removal operation
# DB row locking / selective threads locking acts as a security barrier
# preventing refresh tokens to be consumed more than once by concurrent requests
# Setting this flag to 'true' prevents from DuplicateKeyException caused by authenticationIdIdx index unique constraint violation.
oauthauthorizationserver.tokenServices.refreshWithLock=true
