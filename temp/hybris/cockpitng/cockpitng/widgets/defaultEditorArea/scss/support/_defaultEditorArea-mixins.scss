@import "_defaultEditorArea-variables.scss";

//    Mixins
//================================

// $ValidationStatus: "error", "warning", "success", "info";

$ValidationStatus: (
    "error": "error",
    "warn": "warning",
    "success": "success",
    "info": "information"
);

@mixin _validation-colored-background ($status) {
    background: var(--bo-input-#{$status}-background);
    border-style: var(--bo-input-border-style);
    border-color: var(--bo-#{$status}-color);

    &:hover {
        background: var(--bo-input-#{$status}-hover-background);
        box-shadow: var(--bo-input-#{$status}-hover-box-shadow);
    }

    &:focus {
        background: var(--bo-input-focus-background);
        outline-color: var(--bo-input-#{$status}-focus-outline-color);
    }
}

@mixin _colored-background-border ($color, $bg-color, $border-color-only: false) {
    background: $bg-color !important;
    @if $border-color-only {
        border-color: $color;
    } @else {
        border: $editor-area__input-field--border-width solid $color;
    }
    color: $color !important;
}

@mixin _colored-background-border-specific ($color, $bg-color:false, $border-top:0, $border-right:0, $border-bottom:0, $border-left:0) {
    @if($bg-color){
        background: $bg-color;
    }
    border-style: solid;
    border-color: $color;
    border-width: $border-top $border-right $border-bottom $border-left;
}

@mixin _text-selection-part ($selected-bg-color, $selected-color){
    background-color: $selected-bg-color;

    @if $selected-color != "default" {
        color: $selected-color;
    }
}

@mixin _text-selection ($bg-color:"default", $color:"default") {
    //$selection-bg-color: $bg-color;

    &::selection {
        @include _text-selection-part($bg-color, $color);
    }
    &::-moz-selection {
        @include _text-selection-part($bg-color, $color);
    }
}

@mixin _addValidationTypeDefaults ($type, $color, $bg-color, $default-bg-icon-size: 16px, $default-child-selector: ">") {
    $realStatusType: map-get($ValidationStatus, $type);

     /* #{$type}: Coloring */
    .ye-validation-#{$type} {
        // Radio-Box-Coloring

        > .z-radiogroup,
        &.yw-loceditor-row {
            input[type="radio"]:checked ~ .z-radio-content {
                &:before {
                    border-color: var(--bo-input-#{$realStatusType}-color);
                    background-color: var(--bo-field-#{$realStatusType}-background);
                }
                &:after {
                    background-color: var(--bo-input-#{$realStatusType}-color);
                }

                &:hover {
                	&:before {
                		 background-color: var(--bo-input-#{$realStatusType}-hover-background);
                		 box-shadow: var(--bo-input-#{$realStatusType}-hover-box-shadow);
                	}
                }
            }
        }


        .ye-instant-editor-label-editable {
            color: $color;
            font-weight: $font-weight-bold;
        }

        // Input-Field Coloring Loc-Editor
        &[class^=yw-loceditor-row] .yw-loceditor-row-editor,
        #{$default-child-selector} {
            input.z-textbox,
            .z-longbox,
            .z-intbox,
            .z-decimalbox,
            .z-doublebox,
            .ye-com_hybris_cockpitng_editor_defaultenum .z-combobox-input,
            .ye-com_hybris_cockpitng_editor_defaultenum a,
            .ye-com_hybris_cockpitng_editor_defaulttime .z-timebox-input,
            .ye-com_hybris_cockpitng_editor_defaulttime .z-timebox-button {
                @if map-has-key($ValidationStatus, $type) {
                    @include _validation-colored-background(map-get($ValidationStatus, $type));
                } @else {
                    @include _colored-background-border($color, $bg-color, true);
                }
            }
            .ye-com_hybris_cockpitng_editor_defaultdate .z-datebox-input,
            .ye-com_hybris_cockpitng_editor_defaultdate .z-datebox-button,
            .ye-com_hybris_cockpitng_editor_defaultdate a,
            .ye-com_hybris_cockpitng_editor_defaultdate a:hover,
            .ye-com_hybris_cockpitng_editor_defaultdate .z-datebox-input:focus + .z-datebox-button {
                @if map-has-key($ValidationStatus, $type) {
                    @include _validation-colored-background(map-get($ValidationStatus, $type));
                } @else {
                    @include _colored-background-border($color, $bg-color, true);
                }
            }
        }

        .z-combobox .z-combobox-input:focus + .z-combobox-button,
        .z-bandbox .z-bandbox-input:focus + .z-bandbox-button {
            border-color: $color;
        }



        &.yw-loceditor-row,
        &.yw-loceditor-row > .z-label,
        &.yw-loceditor-row-wysiwyg > .z-label,
        &.yw-loceditor-row-wysiwyg .yw-loceditor-row-editor .z-ckeditor .cke_contents {
            border-color: $color;
        }

        .yw-loceditor-disabled {
            .z-label {
                color: $color;
            }
        }
    }

    .yw-editorarea-tabbox-tabpanels-tabpanel-groupbox-attrcell,
    .yw-editorarea-tabbox-tabpanels-tabpanel-groupbox-ed-editor {
        .yw-loceditor-row.ye-validation-#{$type} {
            .ye-com_hybris_cockpitng_editor_defaultmap .ye-list-listbox .z-listbox-body {
                border-color: $color;

                tr {
                    td {
                        background: $bg-color;
                        color: $color;
                        border-top-color: $color;
                    }
                }
                .z-listcell-content:hover {
                    background: transparent;
                }
                .ye-map-key,
                .ye-map-value {
                    color: $color;
                }
            }
        }
    }
    .ye-validation-#{$type} {
        &.yw-loceditor-row {
            .ye-com_hybris_cockpitng_editor_boolean_wrapper {
                border-color: $color;
            }
        }
    }

}
