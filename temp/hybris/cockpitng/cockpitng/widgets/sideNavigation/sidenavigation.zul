<?xml version="1.0" encoding="UTF-8"?>
<zk xmlns="http://www.zkoss.org/2005/zul" xmlns:w="client">
	<widget style="min-height: 30px; height:100%" sclass="yw-sideNavigation-widget">
	<div sclass="search-content">
		<button sclass="search-button y-btn-transparent" id="searchBtn" tooltiptext="${labels.search.button.tooltips}"></button>
	</div>

	<div w:onAfterSize="onSideNavResized(event.target)" id="sideNavigationContainer" sclass="yw-sideNavigation-container">
		<div id="sideNavigationScrollUpContainer" sclass="scroll-content-up">
			<button w:onClick="onTreeScrollClicked(event.target, 1)" tooltiptext="${labels.scrollup.button.tooltips}" sclass="scroll-button-up y-btn-transparent" id="scrollUpBtn"></button>
		</div>
		<tree id="sideNavigationTree" multiple="false" sclass="yw-sideNavigation" zclass="z-vfiletree"/>
		<div id="sideNavigationScrollDownContainer" sclass="scroll-content-down">
			<button w:onClick="onTreeScrollClicked(event.target, 0)" tooltiptext="${labels.scrolldown.button.tooltips}"  sclass="scroll-button-down y-btn-transparent" id="scrollDownBtn"></button>
		</div>
	</div>

	<div sclass="yw-sideNavigation-bottom">
        <widgetslot slotID="bottom"/>
    </div>
	</widget>
	<script>
		<![CDATA[
			function onSideNavResized(container) {
				if (container) {
					const containerDom = container.$n();
					const formatted = sideNavFormatter(containerDom);
					if (formatted && formatted.scrollDown && formatted.scrollUp && formatted.sideNavNodes) {
						if (formatted.sideNavNodes.offsetHeight < formatted.sideNavNodes.firstChild.offsetHeight
							|| formatted.sideNavNodes.offsetHeight < formatted.sideNavNodes.scrollHeight) {
							formatted.scrollDown.style.display = 'flex';
							formatted.scrollUp.style.display = 'flex';
						} else {
							formatted.scrollDown.style.display = 'none';
							formatted.scrollUp.style.display = 'none';
						}
					}
				}
			}

			function onTreeScrollClicked(btn, action) {
				if (btn) {
					const domBtn = btn.$n();
					const container = domBtn.parentElement.parentElement;
					const increment = action ? 40 : -40;
					const formatted = sideNavFormatter(container);
					if (formatted && formatted.sideNavNodes) {
						formatted.sideNavNodes.scrollTop += increment;
					}
				}
			}

			function sideNavFormatter(container) {
				if (container instanceof HTMLElement && container.classList.contains('yw-sideNavigation-container')) {
					let formatted = { scrollUp: null, scrollDown: null, sideNavNodes: null };
					const children = Array.from(container.children);
					if (children && children.length == 3) {
						formatted.scrollUp = children.find(child => child.classList.contains("scroll-content-up"));
						formatted.scrollDown = children.find(child => child.classList.contains("scroll-content-down"));
						formatted.sideNavNodes = children.find(child => child.classList.contains("yw-sideNavigation"));
					}
					return formatted;
				}
			}
		]]>
	</script>
</zk>
